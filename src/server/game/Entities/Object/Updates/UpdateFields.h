/*
 * This file is part of the TrinityCore Project. See AUTHORS file for Copyright information
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UpdateFields_h__
#define UpdateFields_h__

#include "EnumFlag.h"
#include "ItemPacketsCommon.h"
#include "MythicPlusPacketsCommon.h"
#include "ObjectGuid.h"
#include "PerksProgramPacketsCommon.h"
#include "Position.h"
#include "QuaternionData.h"
#include "UpdateField.h"
#include "UpdateMask.h"

// This file is automatically generated, DO NOT EDIT

class AreaTrigger;
class AzeriteEmpoweredItem;
class AzeriteItem;
class Bag;
class ByteBuffer;
class Conversation;
class Corpse;
class Creature;
class DynamicObject;
class GameObject;
class Item;
class Object;
class Player;
class Unit;

namespace UF
{
struct ObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> EntryID;
    struct EntryIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 2> DynamicFlags;
    struct DynamicFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<float, 0, 3> Scale;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemEnchantment : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ID;
    UpdateField<uint32, 0, 2> Duration;
    UpdateField<int16, 0, 3> Charges;
    UpdateField<uint16, 0, 4> Inactive;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemMod : public IsUpdateFieldStructureTag
{
    uint8 Type;
    int32 Value;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ItemMod const& right) const;
    bool operator!=(ItemMod const& right) const { return !(*this == right); }
};

struct ItemModList : public IsUpdateFieldStructureTag, public HasChangesMask<1>
{
    DynamicUpdateField<UF::ItemMod, -1, 0> Values;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArtifactPower : public IsUpdateFieldStructureTag
{
    int16 ArtifactPowerID;
    uint8 PurchasedRank;
    uint8 CurrentRankWithBonus;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ArtifactPower const& right) const;
    bool operator!=(ArtifactPower const& right) const { return !(*this == right); }
};

struct SocketedGem : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint8, 0, 2> Context;
    UpdateFieldArray<uint16, 16, 3, 4> BonusListIDs;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemData : public IsUpdateFieldStructureTag, public HasChangesMask<43>
{
    DynamicUpdateField<UF::ArtifactPower, 0, 1> ArtifactPowers;
    DynamicUpdateField<UF::SocketedGem, 0, 2> Gems;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> ContainedIn;
    UpdateField<ObjectGuid, 0, 5> Creator;
    UpdateField<ObjectGuid, 0, 6> GiftCreator;
    UpdateField<uint32, 0, 7> StackCount;
    UpdateField<uint32, 0, 8> Expiration;
    UpdateField<uint32, 0, 9> DynamicFlags;
    UpdateField<int32, 0, 10> PropertySeed;
    UpdateField<int32, 0, 11> RandomPropertiesID;
    UpdateField<uint32, 0, 12> Durability;
    UpdateField<uint32, 0, 13> MaxDurability;
    UpdateField<uint32, 0, 14> CreatePlayedTime;
    UpdateField<uint8, 0, 15> Context;
    UpdateField<int64, 0, 16> CreateTime;
    UpdateField<uint64, 0, 17> ArtifactXP;
    UpdateField<uint8, 0, 18> ItemAppearanceModID;
    UpdateField<UF::ItemModList, 0, 19> Modifiers;
    UpdateField<uint32, 0, 20> ZoneFlags;
    UpdateField<WorldPackets::Item::ItemBonusKey, 0, 21> ItemBonusKey;
    UpdateField<uint16, 0, 22> DEBUGItemLevel;
    UpdateFieldArray<int32, 5, 23, 24> SpellCharges;
    UpdateFieldArray<UF::ItemEnchantment, 13, 29, 30> Enchantment;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Item const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ContainerData : public IsUpdateFieldStructureTag, public HasChangesMask<39>
{
    UpdateField<uint32, 0, 1> NumSlots;
    UpdateFieldArray<ObjectGuid, 36, 2, 3> Slots;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Bag const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct UnitChannel : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 SpellXSpellVisualID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(UnitChannel const& right) const;
    bool operator!=(UnitChannel const& right) const { return !(*this == right); }
};

struct VisibleItem : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<int32, 0, 2> SecondaryItemModifiedAppearanceID;
    UpdateField<int32, 0, 3> ConditionalItemAppearanceID;
    UpdateField<uint16, 0, 4> ItemAppearanceModID;
    UpdateField<uint16, 0, 5> ItemVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PassiveSpellHistory : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 AuraSpellID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(PassiveSpellHistory const& right) const;
    bool operator!=(PassiveSpellHistory const& right) const { return !(*this == right); }
};

struct UnitData : public IsUpdateFieldStructureTag, public HasChangesMask<229>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    struct StateWorldEffectIDsTag : ViewerDependentValueTag<std::vector<uint32>> {};
    DynamicUpdateField<UF::PassiveSpellHistory, 0, 2> PassiveSpells;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    DynamicUpdateField<ObjectGuid, 0, 4> ChannelObjects;
    UpdateField<int64, 0, 5> Health;
    UpdateField<int64, 0, 6> MaxHealth;
    UpdateField<int32, 0, 7> DisplayID;
    struct DisplayIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 8> NpcFlags;
    struct NpcFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 0, 9> NpcFlags2;
    struct NpcFlags2Tag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 0, 10> StateSpellVisualID;
    struct StateSpellVisualIDTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 0, 11> StateAnimID;
    struct StateAnimIDTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 0, 12> StateAnimKitID;
    struct StateAnimKitIDTag : ViewerDependentValueTag<uint32> {};
    UpdateField<ObjectGuid, 0, 13> Charm;
    UpdateField<ObjectGuid, 0, 14> Summon;
    UpdateField<ObjectGuid, 0, 15> Critter;
    UpdateField<ObjectGuid, 0, 16> CharmedBy;
    UpdateField<ObjectGuid, 0, 17> SummonedBy;
    UpdateField<ObjectGuid, 0, 18> CreatedBy;
    UpdateField<ObjectGuid, 0, 19> DemonCreator;
    UpdateField<ObjectGuid, 0, 20> LookAtControllerTarget;
    UpdateField<ObjectGuid, 0, 21> Target;
    UpdateField<ObjectGuid, 0, 22> BattlePetCompanionGUID;
    UpdateField<uint64, 0, 23> BattlePetDBID;
    UpdateField<UF::UnitChannel, 0, 24> ChannelData;
    UpdateField<uint32, 0, 25> SummonedByHomeRealm;
    UpdateField<uint8, 0, 26> Race;
    UpdateField<uint8, 0, 27> ClassId;
    UpdateField<uint8, 0, 28> PlayerClassId;
    UpdateField<uint8, 0, 29> Sex;
    UpdateField<uint8, 0, 30> DisplayPower;
    UpdateField<uint32, 0, 31> OverrideDisplayPowerID;
    UpdateField<int32, 32, 33> Level;
    UpdateField<int32, 32, 34> EffectiveLevel;
    UpdateField<int32, 32, 35> ContentTuningID;
    UpdateField<int32, 32, 36> ScalingLevelMin;
    UpdateField<int32, 32, 37> ScalingLevelMax;
    UpdateField<int32, 32, 38> ScalingLevelDelta;
    UpdateField<uint8, 32, 39> ScalingFactionGroup;
    UpdateField<int32, 32, 40> FactionTemplate;
    struct FactionTemplateTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 32, 41> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 42> Flags2;
    struct Flags2Tag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 43> Flags3;
    struct Flags3Tag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 44> Flags4;
    struct Flags4Tag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 45> AuraState;
    struct AuraStateTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 46> RangedAttackRoundBaseTime;
    UpdateField<float, 32, 47> BoundingRadius;
    UpdateField<float, 32, 48> CombatReach;
    UpdateField<float, 32, 49> DisplayScale;
    UpdateField<int32, 32, 50> NativeDisplayID;
    UpdateField<float, 32, 51> NativeXDisplayScale;
    UpdateField<int32, 32, 52> MountDisplayID;
    UpdateField<float, 32, 53> MinDamage;
    UpdateField<float, 32, 54> MaxDamage;
    UpdateField<float, 32, 55> MinOffHandDamage;
    UpdateField<float, 32, 56> MaxOffHandDamage;
    UpdateField<uint8, 32, 57> StandState;
    UpdateField<uint8, 32, 58> PetTalentPoints;
    UpdateField<uint8, 32, 59> VisFlags;
    UpdateField<uint8, 32, 60> AnimTier;
    UpdateField<uint32, 32, 61> PetNumber;
    UpdateField<uint32, 32, 62> PetNameTimestamp;
    UpdateField<uint32, 32, 63> PetExperience;
    UpdateField<uint32, 64, 65> PetNextLevelExperience;
    UpdateField<float, 64, 66> ModCastingSpeed;
    UpdateField<float, 64, 67> ModSpellHaste;
    UpdateField<float, 64, 68> ModHaste;
    UpdateField<float, 64, 69> ModRangedHaste;
    UpdateField<float, 64, 70> ModHasteRegen;
    UpdateField<float, 64, 71> ModTimeRate;
    UpdateField<int32, 64, 72> CreatedBySpell;
    UpdateField<int32, 64, 73> EmoteState;
    UpdateField<int16, 64, 74> TrainingPointsUsed;
    UpdateField<int16, 64, 75> TrainingPointsTotal;
    UpdateField<int32, 64, 76> BaseMana;
    UpdateField<int32, 64, 77> BaseHealth;
    UpdateField<uint8, 64, 78> SheatheState;
    UpdateField<uint8, 64, 79> PvpFlags;
    struct PvpFlagsTag : ViewerDependentValueTag<uint8> {};
    UpdateField<uint8, 64, 80> PetFlags;
    UpdateField<uint8, 64, 81> ShapeshiftForm;
    UpdateField<int32, 64, 82> AttackPower;
    UpdateField<int32, 64, 83> AttackPowerModPos;
    UpdateField<int32, 64, 84> AttackPowerModNeg;
    UpdateField<float, 64, 85> AttackPowerMultiplier;
    UpdateField<int32, 64, 86> RangedAttackPower;
    UpdateField<int32, 64, 87> RangedAttackPowerModPos;
    UpdateField<int32, 64, 88> RangedAttackPowerModNeg;
    UpdateField<float, 64, 89> RangedAttackPowerMultiplier;
    UpdateField<int32, 64, 90> SetAttackSpeedAura;
    UpdateField<float, 64, 91> Lifesteal;
    UpdateField<float, 64, 92> MinRangedDamage;
    UpdateField<float, 64, 93> MaxRangedDamage;
    UpdateField<float, 64, 94> MaxHealthModifier;
    UpdateField<float, 64, 95> HoverHeight;
    UpdateField<int32, 96, 97> MinItemLevelCutoff;
    UpdateField<int32, 96, 98> MinItemLevel;
    UpdateField<int32, 96, 99> MaxItemLevel;
    UpdateField<int32, 96, 100> WildBattlePetLevel;
    UpdateField<uint32, 96, 101> BattlePetCompanionNameTimestamp;
    UpdateField<int32, 96, 102> InteractSpellID;
    struct InteractSpellIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<int32, 96, 103> ScaleDuration;
    UpdateField<int32, 96, 104> LooksLikeMountID;
    UpdateField<int32, 96, 105> LooksLikeCreatureID;
    UpdateField<int32, 96, 106> LookAtControllerID;
    UpdateField<int32, 96, 107> PerksVendorItemID;
    UpdateField<ObjectGuid, 96, 108> GuildGUID;
    UpdateField<ObjectGuid, 96, 109> SkinningOwnerGUID;
    UpdateField<int32, 96, 110> FlightCapabilityID;
    UpdateField<float, 96, 111> GlideEventSpeedDivisor;                         // Movement speed gets divided by this value when evaluating what GlideEvents to use
    UpdateField<int32, 96, 112> DriveCapabilityID;
    UpdateField<uint32, 96, 113> SilencedSchoolMask;
    UpdateField<uint32, 96, 114> CurrentAreaID;
    UpdateField<ObjectGuid, 96, 115> ComboTarget;
    UpdateField<float, 96, 116> Field_2F0;
    UpdateField<float, 96, 117> Field_2F4;
    UpdateFieldArray<float, 10, 118, 119> PowerRegenFlatModifier;
    UpdateFieldArray<float, 10, 118, 129> PowerRegenInterruptedFlatModifier;
    UpdateFieldArray<int32, 10, 118, 139> Power;
    UpdateFieldArray<int32, 10, 118, 149> MaxPower;
    UpdateFieldArray<float, 10, 118, 159> ModPowerRegen;                        // Applies to power regen only if expansion < 2, hidden from lua
    UpdateFieldArray<UF::VisibleItem, 3, 169, 170> VirtualItems;
    UpdateFieldArray<uint32, 3, 173, 174> AttackRoundBaseTime;
    UpdateFieldArray<int32, 5, 177, 178> Stats;
    UpdateFieldArray<int32, 5, 177, 183> StatPosBuff;
    UpdateFieldArray<int32, 5, 177, 188> StatNegBuff;
    UpdateFieldArray<int32, 7, 193, 194> Resistances;
    UpdateFieldArray<int32, 7, 193, 201> ResistanceBuffModsPositive;
    UpdateFieldArray<int32, 7, 193, 208> ResistanceBuffModsNegative;
    UpdateFieldArray<int32, 7, 193, 215> PowerCostModifier;
    UpdateFieldArray<float, 7, 193, 222> PowerCostMultiplier;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Unit const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ChrCustomizationChoice : public IsUpdateFieldStructureTag
{
    uint32 ChrCustomizationOptionID;
    uint32 ChrCustomizationChoiceID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(ChrCustomizationChoice const& right) const;
    bool operator!=(ChrCustomizationChoice const& right) const { return !(*this == right); }
};

struct QuestLog : public IsUpdateFieldStructureTag, public HasChangesMask<29>
{
    UpdateField<int64, 0, 1> EndTime;
    UpdateField<int32, 0, 2> QuestID;
    UpdateField<uint32, 0, 3> StateFlags;
    UpdateFieldArray<uint16, 24, 4, 5> ObjectiveProgress;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArenaCooldown : public IsUpdateFieldStructureTag, public HasChangesMask<9>
{
    UpdateField<int32, 0, 1> SpellID;
    UpdateField<int32, 0, 2> ItemID;
    UpdateField<int32, 0, 3> Charges;
    UpdateField<uint32, 0, 4> Flags;
    UpdateField<uint32, 0, 5> StartTime;
    UpdateField<uint32, 0, 6> EndTime;
    UpdateField<uint32, 0, 7> NextChargeTime;
    UpdateField<uint8, 0, 8> MaxCharges;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ZonePlayerForcedReaction : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<int32, 0, 1> FactionID;
    UpdateField<int32, 0, 2> Reaction;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DeclinedNames : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateFieldArray<std::string, 5, 0, 1> Name;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CustomTabardInfo : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, -1, 0> EmblemStyle;
    UpdateField<int32, -1, 1> EmblemColor;
    UpdateField<int32, -1, 2> BorderStyle;
    UpdateField<int32, -1, 3> BorderColor;
    UpdateField<int32, -1, 4> BackgroundColor;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<148>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    DynamicUpdateField<UF::ArenaCooldown, 0, 2> ArenaCooldowns;
    DynamicUpdateField<int32, 0, 3> VisualItemReplacements;
    UpdateField<ObjectGuid, 0, 4> DuelArbiter;
    UpdateField<ObjectGuid, 0, 5> WowAccount;
    UpdateField<ObjectGuid, 0, 6> BnetAccount;
    UpdateField<uint64, 0, 7> GuildClubMemberID;
    UpdateField<ObjectGuid, 0, 8> LootTargetGUID;
    UpdateField<uint32, 0, 9> PlayerFlags;
    UpdateField<uint32, 0, 10> PlayerFlagsEx;
    UpdateField<uint32, 0, 11> GuildRankID;
    UpdateField<uint32, 0, 12> GuildDeleteDate;
    UpdateField<int32, 0, 13> GuildLevel;
    UpdateField<uint8, 0, 14> NumBankSlots;
    UpdateField<uint8, 0, 15> NativeSex;
    UpdateField<uint8, 0, 16> Inebriation;
    UpdateField<uint8, 0, 17> PvpTitle;
    UpdateField<uint8, 0, 18> ArenaFaction;
    UpdateField<uint8, 0, 19> PvpRank;
    UpdateField<int32, 0, 20> Field_88;
    UpdateField<uint32, 0, 21> DuelTeam;
    UpdateField<int32, 0, 22> GuildTimeStamp;
    UpdateField<int32, 0, 23> PlayerTitle;
    UpdateField<int32, 0, 24> FakeInebriation;
    UpdateField<uint32, 0, 25> VirtualPlayerRealm;
    UpdateField<uint32, 0, 26> CurrentSpecID;
    UpdateField<int32, 0, 27> TaxiMountAnimKitID;
    UpdateField<uint8, 0, 28> CurrentBattlePetBreedQuality;
    UpdateField<int32, 0, 29> HonorLevel;
    UpdateField<int64, 0, 30> LogoutTime;
    UpdateField<std::string, 0, 31> Name;
    UpdateField<int32, 32, 33> Field_13C;
    UpdateField<int32, 32, 34> Field_140;
    UpdateField<int32, 32, 35> CurrentBattlePetSpeciesID;
    UpdateField<WorldPackets::MythicPlus::DungeonScoreSummary, 32, 36> DungeonScore;
    OptionalUpdateField<UF::DeclinedNames, 32, 37> DeclinedNames;
    UpdateField<UF::CustomTabardInfo, 32, 38> PersonalTabard;
    UpdateFieldArray<uint8, 2, 39, 40> PartyType;
    UpdateFieldArray<UF::QuestLog, 25, 42, 43> QuestLog;
    UpdateFieldArray<UF::VisibleItem, 19, 68, 69> VisibleItems;
    UpdateFieldArray<float, 6, 88, 89> AvgItemLevel;
    UpdateFieldArray<UF::ZonePlayerForcedReaction, 32, 95, 96> ForcedReactions;
    UpdateFieldArray<uint32, 19, 128, 129> Field_3120;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
    bool IsQuestLogChangesMaskSkipped() const { return false; } // bandwidth savings aren't worth the cpu time
};

struct SkillInfo : public IsUpdateFieldStructureTag, public HasChangesMask<1793>
{
    UpdateFieldArray<uint16, 256, 0, 1> SkillLineID;
    UpdateFieldArray<uint16, 256, 0, 257> SkillStep;
    UpdateFieldArray<uint16, 256, 0, 513> SkillRank;
    UpdateFieldArray<uint16, 256, 0, 769> SkillStartingRank;
    UpdateFieldArray<uint16, 256, 0, 1025> SkillMaxRank;
    UpdateFieldArray<int16, 256, 0, 1281> SkillTempBonus;
    UpdateFieldArray<uint16, 256, 0, 1537> SkillPermBonus;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct BitVector : public IsUpdateFieldStructureTag, public HasChangesMask<2>
{
    DynamicUpdateField<uint64, 0, 1> Values;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct BitVectors : public IsUpdateFieldStructureTag, public HasChangesMask<14>
{
    UpdateFieldArray<UF::BitVector, 13, 0, 1> Values;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PlayerDataElement : public IsUpdateFieldStructureTag
{
    uint32 Type;
    float FloatValue;
    int64 Int64Value;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(PlayerDataElement const& right) const;
    bool operator!=(PlayerDataElement const& right) const { return !(*this == right); }
};

struct RestInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<uint32, 0, 1> Threshold;
    UpdateField<uint8, 0, 2> StateID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PVPInfo : public IsUpdateFieldStructureTag, public HasChangesMask<19>
{
    UpdateField<bool, 0, 1> Disqualified;
    UpdateField<int8, 0, 2> Bracket;
    UpdateField<int32, 0, 3> PvpRatingID;
    UpdateField<uint32, 0, 4> WeeklyPlayed;
    UpdateField<uint32, 0, 5> WeeklyWon;
    UpdateField<uint32, 0, 6> SeasonPlayed;
    UpdateField<uint32, 0, 7> SeasonWon;
    UpdateField<uint32, 0, 8> Rating;
    UpdateField<uint32, 0, 9> WeeklyBestRating;
    UpdateField<uint32, 0, 10> SeasonBestRating;
    UpdateField<uint32, 0, 11> PvpTierID;
    UpdateField<uint32, 0, 12> WeeklyBestWinPvpTierID;
    UpdateField<uint32, 0, 13> Field_28;
    UpdateField<uint32, 0, 14> Field_2C;
    UpdateField<uint32, 0, 15> WeeklyRoundsPlayed;
    UpdateField<uint32, 0, 16> WeeklyRoundsWon;
    UpdateField<uint32, 0, 17> SeasonRoundsPlayed;
    UpdateField<uint32, 0, 18> SeasonRoundsWon;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct Research : public IsUpdateFieldStructureTag
{
    int16 ResearchProjectID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(Research const& right) const;
    bool operator!=(Research const& right) const { return !(*this == right); }
};

struct CharacterRestriction : public IsUpdateFieldStructureTag
{
    int32 Field_0;
    int32 Field_4;
    int32 Field_8;
    uint32 Type;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CharacterRestriction const& right) const;
    bool operator!=(CharacterRestriction const& right) const { return !(*this == right); }
};

struct SpellPctModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    float ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellPctModByLabel const& right) const;
    bool operator!=(SpellPctModByLabel const& right) const { return !(*this == right); }
};

struct SpellFlatModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    int32 ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellFlatModByLabel const& right) const;
    bool operator!=(SpellFlatModByLabel const& right) const { return !(*this == right); }
};

struct CompletedProject : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<uint32, 0, 1> ProjectID;
    UpdateField<int64, 0, 2> FirstCompleted;
    UpdateField<uint32, 0, 3> CompletionCount;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ResearchHistory : public IsUpdateFieldStructureTag, public HasChangesMask<2>
{
    DynamicUpdateField<UF::CompletedProject, 0, 1> CompletedProjects;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct TraitEntry : public IsUpdateFieldStructureTag
{
    int32 TraitNodeID;
    int32 TraitNodeEntryID;
    int32 Rank;
    int32 GrantedRanks;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(TraitEntry const& right) const;
    bool operator!=(TraitEntry const& right) const { return !(*this == right); }
};

struct TraitSubTreeCache : public IsUpdateFieldStructureTag
{
    std::vector<UF::TraitEntry> Entries;
    int32 TraitSubTreeID;
    uint32 Active;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(TraitSubTreeCache const& right) const;
    bool operator!=(TraitSubTreeCache const& right) const { return !(*this == right); }
};

struct TraitConfig : public IsUpdateFieldStructureTag, public HasChangesMask<14>
{
    DynamicUpdateField<UF::TraitEntry, 0, 1> Entries;
    DynamicUpdateField<UF::TraitSubTreeCache, 0, 2> SubTrees;
    UpdateField<int32, 0, 3> ID;
    UpdateField<std::string, 4, 5> Name;
    UpdateField<int32, 4, 6> Type;
    UpdateField<int32, 4, 7> SkillLineID;
    UpdateField<int32, 8, 9> ChrSpecializationID;
    UpdateField<int32, 8, 10> CombatConfigFlags;
    UpdateField<int32, 8, 11> LocalIdentifier;
    UpdateField<int32, 12, 13> TraitSystemID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CategoryCooldownMod : public IsUpdateFieldStructureTag
{
    int32 SpellCategoryID;
    int32 ModCooldown;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CategoryCooldownMod const& right) const;
    bool operator!=(CategoryCooldownMod const& right) const { return !(*this == right); }
};

struct WeeklySpellUse : public IsUpdateFieldStructureTag
{
    int32 SpellCategoryID;
    uint8 Uses;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(WeeklySpellUse const& right) const;
    bool operator!=(WeeklySpellUse const& right) const { return !(*this == right); }
};

struct StablePetInfo : public IsUpdateFieldStructureTag, public HasChangesMask<9>
{
    UpdateField<uint32, 0, 1> PetSlot;
    UpdateField<uint32, 0, 2> PetNumber;
    UpdateField<uint32, 0, 3> CreatureID;
    UpdateField<uint32, 0, 4> DisplayID;
    UpdateField<uint32, 0, 5> ExperienceLevel;
    UpdateField<std::string, 0, 6> Name;
    UpdateField<uint8, 0, 7> PetFlags;
    UpdateField<uint8, 0, 8> Field_96;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct StableInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    DynamicUpdateField<UF::StablePetInfo, 0, 1> Pets;
    UpdateField<ObjectGuid, 0, 2> StableMaster;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct BankTabSettings : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<std::string, -1, 0> Name;
    UpdateField<std::string, -1, 1> Icon;
    UpdateField<std::string, -1, 2> Description;
    UpdateField<int32, -1, 3> DepositFlags;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ActivePlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<1438>
{
    UpdateField<bool, 0, 1> SortBagsRightToLeft;
    UpdateField<bool, 0, 2> InsertItemsLeftToRight;
    UpdateFieldArray<DynamicUpdateFieldBase<uint16>, 1, 24, 25> ResearchSites;
    UpdateFieldArray<DynamicUpdateFieldBase<uint32>, 1, 26, 27> ResearchSiteProgress;
    UpdateFieldArray<DynamicUpdateFieldBase<UF::Research>, 1, 28, 29> Research;
    DynamicUpdateField<uint64, 0, 3> KnownTitles;
    DynamicUpdateField<int32, 0, 6> DailyQuestsCompleted;
    DynamicUpdateField<int32, 0, 7> AvailableQuestLineXQuestIDs;
    DynamicUpdateField<int32, 0, 8> Field_1000;
    DynamicUpdateField<int32, 0, 9> Heirlooms;
    DynamicUpdateField<uint32, 0, 10> HeirloomFlags;
    DynamicUpdateField<int32, 0, 11> Toys;
    DynamicUpdateField<uint32, 0, 12> Transmog;
    DynamicUpdateField<int32, 0, 13> ConditionalTransmog;
    DynamicUpdateField<int32, 0, 14> SelfResSpells;
    DynamicUpdateField<uint32, 0, 15> WarbandScenes;
    DynamicUpdateField<UF::SpellPctModByLabel, 0, 17> SpellPctModByLabel;
    DynamicUpdateField<UF::SpellFlatModByLabel, 0, 18> SpellFlatModByLabel;
    DynamicUpdateField<UF::QuestLog, 0, 19> TaskQuests;
    DynamicUpdateField<UF::CategoryCooldownMod, 0, 21> CategoryCooldownMods;
    DynamicUpdateField<UF::WeeklySpellUse, 0, 22> WeeklySpellUses;
    DynamicUpdateField<UF::PlayerDataElement, 0, 4> CharacterDataElements;
    DynamicUpdateField<UF::PlayerDataElement, 0, 5> AccountDataElements;
    DynamicUpdateField<UF::CharacterRestriction, 0, 16> CharacterRestrictions;
    DynamicUpdateField<UF::TraitConfig, 0, 20> TraitConfigs;
    DynamicUpdateField<UF::BankTabSettings, 0, 23> AccountBankTabSettings;
    UpdateField<ObjectGuid, 0, 30> FarsightObject;
    UpdateField<ObjectGuid, 0, 31> SummonedBattlePetGUID;
    UpdateField<uint64, 0, 32> Coinage;
    UpdateField<uint64, 0, 33> AccountBankCoinage;
    UpdateField<int32, 0, 34> XP;
    UpdateField<int32, 0, 35> NextLevelXP;
    UpdateField<int32, 0, 36> TrialXP;
    UpdateField<UF::SkillInfo, 0, 37> Skill;
    UpdateField<int32, 38, 39> CharacterPoints;
    UpdateField<int32, 38, 40> MaxTalentTiers;
    UpdateField<uint32, 38, 41> TrackCreatureMask;
    UpdateField<float, 38, 42> MainhandExpertise;
    UpdateField<float, 38, 43> OffhandExpertise;
    UpdateField<float, 38, 44> RangedExpertise;
    UpdateField<float, 38, 45> CombatRatingExpertise;
    UpdateField<float, 38, 46> BlockPercentage;
    UpdateField<float, 38, 47> DodgePercentage;
    UpdateField<float, 38, 48> DodgePercentageFromAttribute;
    UpdateField<float, 38, 49> ParryPercentage;
    UpdateField<float, 38, 50> ParryPercentageFromAttribute;
    UpdateField<float, 38, 51> CritPercentage;
    UpdateField<float, 38, 52> RangedCritPercentage;
    UpdateField<float, 38, 53> OffhandCritPercentage;
    UpdateField<int32, 38, 54> ShieldBlock;
    UpdateField<float, 38, 55> ShieldBlockCritPercentage;
    UpdateField<float, 38, 56> Mastery;
    UpdateField<float, 38, 57> Speed;
    UpdateField<float, 38, 58> Avoidance;
    UpdateField<float, 38, 59> Sturdiness;
    UpdateField<int32, 38, 60> Versatility;
    UpdateField<float, 38, 61> VersatilityBonus;
    UpdateField<float, 38, 62> PvpPowerDamage;
    UpdateField<float, 38, 63> PvpPowerHealing;
    UpdateField<UF::BitVectors, 38, 64> BitVectors;
    UpdateField<int32, 38, 65> ModHealingDonePos;
    UpdateField<float, 38, 66> ModHealingPercent;
    UpdateField<float, 38, 67> ModHealingDonePercent;
    UpdateField<float, 38, 68> ModPeriodicHealingDonePercent;
    UpdateField<float, 38, 69> ModSpellPowerPercent;
    UpdateField<float, 70, 71> ModResiliencePercent;
    UpdateField<float, 70, 72> OverrideSpellPowerByAPPercent;
    UpdateField<float, 70, 73> OverrideAPBySpellPowerPercent;
    UpdateField<int32, 70, 74> ModTargetResistance;
    UpdateField<int32, 70, 75> ModTargetPhysicalResistance;
    UpdateField<uint32, 70, 76> LocalFlags;
    UpdateField<uint8, 70, 77> GrantableLevels;
    UpdateField<uint8, 70, 78> MultiActionBars;
    UpdateField<uint8, 70, 79> LifetimeMaxRank;
    UpdateField<uint8, 70, 80> NumRespecs;
    UpdateField<int32, 70, 81> AmmoID;
    UpdateField<uint8, 70, 82> PvpMedals;
    UpdateField<uint16, 70, 83> TodayHonorableKills;
    UpdateField<uint16, 70, 84> TodayDishonorableKills;
    UpdateField<uint16, 70, 85> YesterdayHonorableKills;
    UpdateField<uint16, 70, 86> YesterdayDishonorableKills;
    UpdateField<uint16, 70, 87> LastWeekHonorableKills;
    UpdateField<uint16, 70, 88> LastWeekDishonorableKills;
    UpdateField<uint16, 70, 89> ThisWeekHonorableKills;
    UpdateField<uint16, 70, 90> ThisWeekDishonorableKills;
    UpdateField<uint32, 70, 91> ThisWeekContribution;
    UpdateField<uint32, 70, 92> LifetimeHonorableKills;
    UpdateField<uint32, 70, 93> LifetimeDishonorableKills;
    UpdateField<uint32, 70, 94> Field_F24;
    UpdateField<uint32, 70, 95> YesterdayContribution;
    UpdateField<uint32, 70, 96> LastWeekContribution;
    UpdateField<uint32, 70, 97> LastWeekRank;
    UpdateField<int32, 70, 98> WatchedFactionIndex;
    UpdateField<int32, 70, 99> MaxLevel;
    UpdateField<int32, 70, 100> ScalingPlayerLevelDelta;
    UpdateField<int32, 70, 101> MaxCreatureScalingLevel;
    UpdateField<int32, 102, 103> PetSpellPower;
    UpdateField<float, 102, 104> UiHitModifier;
    UpdateField<float, 102, 105> UiSpellHitModifier;
    UpdateField<int32, 102, 106> HomeRealmTimeOffset;
    UpdateField<float, 102, 107> ModPetHaste;
    UpdateField<uint8, 102, 108> LocalRegenFlags;
    UpdateField<uint8, 102, 109> AuraVision;
    UpdateField<uint8, 102, 110> NumBackpackSlots;
    UpdateField<int32, 102, 111> OverrideSpellsID;
    UpdateField<int32, 102, 112> LfgBonusFactionID;
    UpdateField<uint16, 102, 113> LootSpecID;
    UpdateField<uint32, 102, 114> OverrideZonePVPType;
    UpdateField<int32, 102, 115> Honor;
    UpdateField<int32, 102, 116> HonorNextLevel;
    UpdateField<int32, 102, 117> Field_F74;
    UpdateField<uint8, 102, 118> Field_1261;
    UpdateField<int32, 102, 119> PvpTierMaxFromWins;
    UpdateField<int32, 102, 120> PvpLastWeeksTierMaxFromWins;
    UpdateField<uint8, 102, 121> PvpRankProgress;
    UpdateField<int32, 102, 122> PerksProgramCurrency;
    UpdateField<UF::ResearchHistory, 102, 123> ResearchHistory;
    UpdateField<WorldPackets::PerksProgram::PerksVendorItem, 102, 124> FrozenPerksVendorItem;
    UpdateField<int32, 102, 125> TimerunningSeasonID;
    UpdateField<int32, 102, 126> TransportServerTime;
    UpdateField<uint32, 102, 127> ActiveCombatTraitConfigID;
    UpdateField<uint16, 102, 128> GlyphsEnabled;
    UpdateField<uint8, 102, 129> LfgRoles;
    OptionalUpdateField<UF::StableInfo, 102, 130> PetStable;
    UpdateField<uint8, 102, 131> NumStableSlots;
    UpdateFieldArray<ObjectGuid, 146, 132, 133> InvSlots;
    UpdateFieldArray<uint32, 2, 279, 280> TrackResourceMask;
    UpdateFieldArray<float, 7, 282, 283> SpellCritPercentage;
    UpdateFieldArray<int32, 7, 282, 290> ModDamageDonePos;
    UpdateFieldArray<int32, 7, 282, 297> ModDamageDoneNeg;
    UpdateFieldArray<float, 7, 282, 304> ModDamageDonePercent;
    UpdateFieldArray<UF::RestInfo, 2, 311, 312> RestInfo;
    UpdateFieldArray<float, 3, 314, 315> WeaponDmgMultipliers;
    UpdateFieldArray<float, 3, 314, 318> WeaponAtkSpeedMultipliers;
    UpdateFieldArray<uint32, 12, 321, 322> BuybackPrice;
    UpdateFieldArray<int64, 12, 321, 334> BuybackTimestamp;
    UpdateFieldArray<int32, 32, 346, 347> CombatRatings;
    UpdateFieldArray<UF::PVPInfo, 9, 379, 380> PvpInfo;
    UpdateFieldArray<uint32, 4, 389, 390> NoReagentCostMask;
    UpdateFieldArray<int32, 2, 394, 395> ProfessionSkillLine;
    UpdateFieldArray<uint32, 4, 397, 398> BagSlotFlags;
    UpdateFieldArray<uint32, 7, 402, 403> BankBagSlotFlags;
    UpdateFieldArray<uint64, 1000, 410, 411> QuestCompleted;
    UpdateFieldArray<uint32, 6, 1411, 1412> GlyphSlots;
    UpdateFieldArray<uint32, 6, 1411, 1418> Glyphs;
    UpdateFieldArray<uint64, 13, 1424, 1425> Field_4348;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct GameObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    struct StateWorldEffectIDsTag : ViewerDependentValueTag<std::vector<uint32>> {};
    DynamicUpdateField<int32, 0, 2> EnableDoodadSets;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    UpdateField<int32, 0, 4> DisplayID;
    UpdateField<uint32, 0, 5> SpellVisualID;
    UpdateField<uint32, 0, 6> StateSpellVisualID;
    struct StateSpellVisualIDTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 0, 7> SpawnTrackingStateAnimID;
    struct SpawnTrackingStateAnimIDTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 0, 8> SpawnTrackingStateAnimKitID;
    struct SpawnTrackingStateAnimKitIDTag : ViewerDependentValueTag<uint32> {};
    UpdateField<ObjectGuid, 0, 9> CreatedBy;
    UpdateField<ObjectGuid, 0, 10> GuildGUID;
    UpdateField<uint32, 0, 11> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<QuaternionData, 0, 12> ParentRotation;
    UpdateField<int32, 0, 13> FactionTemplate;
    UpdateField<int32, 0, 14> Level;
    UpdateField<int8, 0, 15> State;
    struct StateTag : ViewerDependentValueTag<int8> {};
    UpdateField<int8, 0, 16> TypeID;
    UpdateField<uint8, 0, 17> PercentHealth;
    UpdateField<uint32, 0, 18> ArtKit;
    UpdateField<uint32, 0, 19> CustomParam;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, GameObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DynamicObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<ObjectGuid, 0, 1> Caster;
    UpdateField<uint8, 0, 2> Type;
    UpdateField<int32, 0, 3> SpellXSpellVisualID;
    UpdateField<int32, 0, 4> SpellID;
    UpdateField<float, 0, 5> Radius;
    UpdateField<uint32, 0, 6> CastTime;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, DynamicObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CorpseData : public IsUpdateFieldStructureTag, public HasChangesMask<32>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    UpdateField<uint32, 0, 2> DynamicFlags;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> PartyGUID;
    UpdateField<ObjectGuid, 0, 5> GuildGUID;
    UpdateField<uint32, 0, 6> DisplayID;
    UpdateField<uint8, 0, 7> RaceID;
    UpdateField<uint8, 0, 8> Sex;
    UpdateField<uint8, 0, 9> Class;
    UpdateField<uint32, 0, 10> Flags;
    UpdateField<int32, 0, 11> FactionTemplate;
    UpdateFieldArray<uint32, 19, 12, 13> Items;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Corpse const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ScaleCurve : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> OverrideActive;
    UpdateField<uint32, 0, 2> StartTimeOffset;
    UpdateField<uint32, 0, 3> ParameterCurve;
    UpdateFieldArray<TaggedPosition<Position::XY>, 2, 4, 5> Points;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct VisualAnim : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<bool, 0, 1> IsDecay;
    UpdateField<uint32, 0, 2> AnimationDataID;
    UpdateField<uint32, 0, 3> AnimKitID;
    UpdateField<uint32, 0, 4> AnimProgress;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AreaTriggerData : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<UF::ScaleCurve, 0, 1> OverrideScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 2> ExtraScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 3> OverrideMoveCurveX;
    UpdateField<UF::ScaleCurve, 0, 4> OverrideMoveCurveY;
    UpdateField<UF::ScaleCurve, 0, 5> OverrideMoveCurveZ;
    UpdateField<ObjectGuid, 0, 6> Caster;
    UpdateField<uint32, 0, 7> Duration;
    UpdateField<uint32, 0, 8> TimeToTarget;
    UpdateField<uint32, 0, 9> TimeToTargetScale;
    UpdateField<uint32, 0, 10> TimeToTargetExtraScale;
    UpdateField<uint32, 0, 11> TimeToTargetPos;                                 // Linked to m_overrideMoveCurve
    UpdateField<int32, 0, 12> SpellID;
    UpdateField<int32, 0, 13> SpellForVisuals;
    UpdateField<int32, 0, 14> SpellXSpellVisualID;
    UpdateField<float, 0, 15> BoundsRadius2D;
    UpdateField<uint32, 0, 16> DecalPropertiesID;
    UpdateField<ObjectGuid, 0, 17> CreatingEffectGUID;
    UpdateField<ObjectGuid, 0, 18> OrbitPathTarget;
    UpdateField<UF::VisualAnim, 0, 19> VisualAnim;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct SceneObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ScriptPackageID;
    UpdateField<uint32, 0, 2> RndSeedVal;
    UpdateField<ObjectGuid, 0, 3> CreatedBy;
    UpdateField<uint32, 0, 4> SceneType;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ConversationLine : public IsUpdateFieldStructureTag
{
    int32 ConversationLineID;
    int32 BroadcastTextID;
    uint32 StartTime;
    struct StartTimeTag : ViewerDependentValueTag<uint32> {};
    int32 UiCameraID;
    uint8 ActorIndex;
    uint8 Flags;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationLine const& right) const;
    bool operator!=(ConversationLine const& right) const { return !(*this == right); }
};

struct ConversationActor : public IsUpdateFieldStructureTag
{
    uint32 Type;
    int32 Id;
    uint32 CreatureID;
    uint32 CreatureDisplayInfoID;
    ObjectGuid ActorGUID;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationActor const& right) const;
    bool operator!=(ConversationActor const& right) const { return !(*this == right); }
};

struct ConversationData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<std::vector<UF::ConversationLine>, 0, 1> Lines;
    DynamicUpdateField<UF::ConversationActor, 0, 2> Actors;
    UpdateField<int32, 0, 3> LastLineEndTime;
    struct LastLineEndTimeTag : ViewerDependentValueTag<int32> {};

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Conversation const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct VendorData : public IsUpdateFieldStructureTag, public HasChangesMask<2>
{
    UpdateField<int32, 0, 1> Flags;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Creature const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Creature const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Creature const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

}

#endif // UpdateFields_h__
